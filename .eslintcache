[{"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\index.js":"1","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\App.js":"2","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\calendar\\calenderView.js":"3","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\index.js":"4","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\dummy.js":"5","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\styles.js":"6","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\constants\\images\\index.js":"7"},{"size":198,"mtime":1608286676319,"results":"8","hashOfConfig":"9"},{"size":518,"mtime":1608576658100,"results":"10","hashOfConfig":"9"},{"size":1838,"mtime":1608576256474,"results":"11","hashOfConfig":"9"},{"size":8780,"mtime":1608576515943,"results":"12","hashOfConfig":"9"},{"size":1058,"mtime":1608576515489,"results":"13","hashOfConfig":"9"},{"size":2497,"mtime":1608576515492,"results":"14","hashOfConfig":"9"},{"size":325,"mtime":1608576515496,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x43767",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\index.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\App.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\calendar\\calenderView.js",["32"],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\index.js",["33","34"],"import React, { useState } from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport images from '../../constants/images/index';\r\nimport _ from 'lodash';\r\nimport useStyles from './styles';\r\nimport clsx from 'clsx';\r\nimport optionsData from './dummy.js';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize='small' />;\r\nconst checkedIcon = <CheckBoxIcon fontSize='small' />;\r\n\r\nconst Dropdown = () => {\r\n  const classes = useStyles();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [val, setVal] = useState([]);\r\n\r\n  // renderDropdownBase = () => {\r\n  //   if(_.difference(val, optionsData).length === 0){\r\n  //     return (<div>All</div>)\r\n  //   }\r\n  //   if()\r\n  // }\r\n  const renderAll = () => {\r\n    const allOptionsSelected = _.difference(val, optionsData).length === 0;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          paddingLeft: 20,\r\n          paddingRight: 16,\r\n        }}\r\n      >\r\n        <span style={{ fontSize: 13, color: '#A0B5D9' }}>All</span>\r\n\r\n        <Checkbox\r\n          checkedIcon={\r\n            <span className={clsx(classes.icon, classes.checkedIcon)} />\r\n          }\r\n          icon={<span className={classes.icon} />}\r\n          checked={allOptionsSelected ? true : false}\r\n          onChange={() => {\r\n            if (allOptionsSelected) {\r\n              setVal([]);\r\n            } else {\r\n              setVal([...optionsData]);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const renderGroup = ({ group, children, id }) => {\r\n    let options = optionsData.filter((item, i) => {\r\n      return item.position === group;\r\n    });\r\n    const allOptionsSelected = _.difference(options, val).length === 0;\r\n    console.log(\r\n      val,\r\n      'val',\r\n      options,\r\n      'options',\r\n      allOptionsSelected,\r\n      'dvfvfdvdfv'\r\n    );\r\n    return (\r\n      <div\r\n        style={{\r\n          borderBottom: '1px solid #25406D',\r\n          // backgroundColor: '#142A51',\r\n        }}\r\n      >\r\n        {/* {options.type === 'All' ? renderAll() : null} */}\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            paddingLeft: 20,\r\n            paddingRight: 16,\r\n          }}\r\n        >\r\n          <span style={{ fontSize: 13, color: '#A0B5D9' }}>{group}</span>\r\n          {group && (\r\n            <Checkbox\r\n              checkedIcon={\r\n                <span className={clsx(classes.icon, classes.checkedIcon)} />\r\n              }\r\n              icon={<span className={classes.icon} />}\r\n              checked={allOptionsSelected ? true : false}\r\n              onChange={() => {\r\n                if (allOptionsSelected) {\r\n                  let array = val.filter(function (el) {\r\n                    return !options.includes(el);\r\n                  });\r\n                  setVal([...array]);\r\n                } else {\r\n                  setVal([...val, ...options]);\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        {options.map((option, index) => {\r\n          let optionIndex = val.indexOf(option);\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                paddingLeft: 20,\r\n                paddingRight: 16,\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n                <img\r\n                  src={option.images}\r\n                  style={{\r\n                    height: 24,\r\n                    width: 24,\r\n                    borderRadius: 50,\r\n                    marginRight: 16,\r\n                    zIndex: 1000,\r\n                  }}\r\n                />\r\n                <span style={{ fontSize: 13, color: '#DAE2EF' }}>\r\n                  {option.title}\r\n                </span>\r\n              </div>\r\n              <Checkbox\r\n                // icon={icon}\r\n                // checkedIcon={checkedIcon}\r\n                checkedIcon={\r\n                  <span className={clsx(classes.icon, classes.checkedIcon)} />\r\n                }\r\n                icon={<span className={classes.icon} />}\r\n                disableRipple\r\n                checked={optionIndex === -1 ? false : true}\r\n                onChange={(e) => {\r\n                  if (optionIndex === -1) {\r\n                    setVal([...val, option]);\r\n                  } else {\r\n                    var array = [...val]; // make a separate copy of the array\r\n                    array.splice(optionIndex, 1);\r\n                    setVal(array);\r\n                  }\r\n\r\n                  console.log(val, 'cdcnjksc');\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        style={{\r\n          width: 376,\r\n          height: 53,\r\n          backgroundColor: '#F0F5FB',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          flexDirection: 'row',\r\n          borderRadius: 16,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            flexDirection: 'row',\r\n            marginLeft: 25,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              flexDirection: 'row',\r\n              // position: 'relative',\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: 24,\r\n                width: 24,\r\n                backgroundColor: '#142A51',\r\n                borderRadius: 50,\r\n                color: 'white',\r\n                fontSize: 13,\r\n                // marginRight: -15,\r\n                zIndex: 2,\r\n              }}\r\n            >\r\n              {val.length > 0 ? val.length : optionsData.length}\r\n            </div>\r\n            {/* {_.times(3, (i) => (\r\n                <img\r\n                  key={i}\r\n                  src={images.one}\r\n                  style={{\r\n                    height: 24,\r\n                    width: 24,\r\n                    marginLeft: -15,\r\n                    borderRadius: 50,\r\n                    border: '3px solid white',\r\n                    // position: 'absolute',\r\n                  }}\r\n                />\r\n              ))} */}\r\n          </div>\r\n\r\n          <span style={{ color: '#7E98BA', marginLeft: 8, fontSize: 13 }}>\r\n            {val.length > 0\r\n              ? _.times(val.length > 2 ? 2 : val.length, (i) => {\r\n                  return i > 0 ? `, ${val[i]?.title}` : val[i]?.title;\r\n                })\r\n              : 'Select Employees'}\r\n          </span>\r\n        </div>\r\n\r\n        <img\r\n          style={{ marginRight: 25 }}\r\n          src={isOpen ? images.arrowDown : images.arrowUp}\r\n        />\r\n      </div>\r\n      {isOpen && (\r\n        <Autocomplete\r\n          multiple\r\n          classes={classes}\r\n          open={true}\r\n          //inputValue={['The Shawshank Redemption']}\r\n          onChange={(event, value) => console.log(value, 'sddjkbfs')}\r\n          popupIcon={() => <div></div>}\r\n          id='checkboxes-tags-demo'\r\n          options={optionsData}\r\n          disableCloseOnSelect\r\n          getOptionLabel={(option) => option.title}\r\n          groupBy={(option) => option.position}\r\n          renderGroup={(group) => {\r\n            return renderGroup(group);\r\n          }}\r\n          style={{ width: 376, overflow: 'none' }}\r\n          onChange={(e) => console.log(e, 'scfvfvsc')}\r\n          openOnFocus\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              variant='outlined'\r\n              // label='Checkboxes'\r\n              placeholder='Search employee...'\r\n              // style={{ backgroundColor: '#1C3663', borderRadius: 10 }}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Dropdown;\r\n",["35","36"],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\dummy.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\styles.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\constants\\images\\index.js",[],{"ruleId":"37","severity":1,"message":"38","line":10,"column":7,"nodeType":"39","messageId":"40","endLine":10,"endColumn":15},{"ruleId":"37","severity":1,"message":"41","line":15,"column":10,"nodeType":"39","messageId":"40","endLine":15,"endColumn":13},{"ruleId":"37","severity":1,"message":"42","line":154,"column":7,"nodeType":"39","messageId":"40","endLine":154,"endColumn":18},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},"no-unused-vars","'lastWeek' is assigned a value but never used.","Identifier","unusedVar","'val' is assigned a value but never used.","'top100Films' is assigned a value but never used.","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-global-assign","no-unsafe-negation"]