[{"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\index.js":"1","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\App.js":"2","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\calendar\\calenderView.js":"3","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\index.js":"4","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\dummy.js":"5","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\styles.js":"6","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\constants\\images\\index.js":"7","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\View.js":"8"},{"size":198,"mtime":1608286676319,"results":"9","hashOfConfig":"10"},{"size":395,"mtime":1608616087090,"results":"11","hashOfConfig":"12"},{"size":1838,"mtime":1608576256474,"results":"13","hashOfConfig":"10"},{"size":8780,"mtime":1608576515943,"results":"14","hashOfConfig":"10"},{"size":1058,"mtime":1608576515489,"results":"15","hashOfConfig":"10"},{"size":2497,"mtime":1608576515492,"results":"16","hashOfConfig":"12"},{"size":325,"mtime":1608576515496,"results":"17","hashOfConfig":"12"},{"size":473,"mtime":1608615885545,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"t08ct7",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u6rphy",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\index.js",[],["38","39"],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\App.js",["40"],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\calendar\\calenderView.js",["41"],"import React from 'react';\r\nimport InfiniteCalendar from 'react-infinite-calendar';\r\nimport 'react-infinite-calendar/styles.css'; // Make sure to import the default stylesheet\r\nimport format from 'date-fns/format';\r\nimport '../styles/CalenderView.css';\r\n\r\nfunction CalenderView() {\r\n  // Render the Calendar\r\n  var today = new Date();\r\n  var lastWeek = new Date(\r\n    today.getFullYear(),\r\n    today.getMonth(),\r\n    today.getDate() - 7\r\n  );\r\n  const [date, setDate] = React.useState('');\r\n  const handleDateChange = (date) => {\r\n    setDate(format(date, 'yyyy-MM-dd'));\r\n    console.log(format(date, 'yyyy-MM-dd'));\r\n  };\r\n\r\n  return (\r\n    <div className='row mt-5'>\r\n      <div class='form-group'>\r\n        <div class='input-group date' id='timepicker'>\r\n          <span class='input-group-addon'>\r\n            <span class='glyphicon glyphicon-calendar'></span>{' '}\r\n          </span>\r\n          <input\r\n            type='text'\r\n            value={date}\r\n            className='datepicker form-control'\r\n            placeholder='Pick date'\r\n            onChange={handleDateChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div></div>\r\n      <InfiniteCalendar\r\n        selected={null}\r\n        width={Math.min(window.innerWidth, 362)}\r\n        height={window.innerHeight - 200}\r\n        rowHeight={50}\r\n        displayOptions={{\r\n          showOverlay: false,\r\n          shouldHeaderAnimate: false,\r\n          showHeader: false,\r\n          showTodayHelper: false,\r\n        }}\r\n        onSelect={handleDateChange}\r\n        theme={{\r\n          weekdayColor: '#142A51',\r\n          headerColor: '#142A51',\r\n          floatingNav: {\r\n            background: '#142A51',\r\n            color: '#FFF',\r\n            chevron: '#142A51',\r\n          },\r\n        }}\r\n      />\r\n      ,\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalenderView;\r\n","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\index.js",["42","43","44","45","46","47"],"import React, { useState } from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport images from '../../constants/images/index';\r\nimport _ from 'lodash';\r\nimport useStyles from './styles';\r\nimport clsx from 'clsx';\r\nimport optionsData from './dummy.js';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize='small' />;\r\nconst checkedIcon = <CheckBoxIcon fontSize='small' />;\r\n\r\nconst Dropdown = () => {\r\n  const classes = useStyles();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [val, setVal] = useState([]);\r\n\r\n  // renderDropdownBase = () => {\r\n  //   if(_.difference(val, optionsData).length === 0){\r\n  //     return (<div>All</div>)\r\n  //   }\r\n  //   if()\r\n  // }\r\n  const renderAll = () => {\r\n    const allOptionsSelected = _.difference(val, optionsData).length === 0;\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          paddingLeft: 20,\r\n          paddingRight: 16,\r\n        }}\r\n      >\r\n        <span style={{ fontSize: 13, color: '#A0B5D9' }}>All</span>\r\n\r\n        <Checkbox\r\n          checkedIcon={\r\n            <span className={clsx(classes.icon, classes.checkedIcon)} />\r\n          }\r\n          icon={<span className={classes.icon} />}\r\n          checked={allOptionsSelected ? true : false}\r\n          onChange={() => {\r\n            if (allOptionsSelected) {\r\n              setVal([]);\r\n            } else {\r\n              setVal([...optionsData]);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const renderGroup = ({ group, children, id }) => {\r\n    let options = optionsData.filter((item, i) => {\r\n      return item.position === group;\r\n    });\r\n    const allOptionsSelected = _.difference(options, val).length === 0;\r\n    console.log(\r\n      val,\r\n      'val',\r\n      options,\r\n      'options',\r\n      allOptionsSelected,\r\n      'dvfvfdvdfv'\r\n    );\r\n    return (\r\n      <div\r\n        style={{\r\n          borderBottom: '1px solid #25406D',\r\n          // backgroundColor: '#142A51',\r\n        }}\r\n      >\r\n        {/* {options.type === 'All' ? renderAll() : null} */}\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            paddingLeft: 20,\r\n            paddingRight: 16,\r\n          }}\r\n        >\r\n          <span style={{ fontSize: 13, color: '#A0B5D9' }}>{group}</span>\r\n          {group && (\r\n            <Checkbox\r\n              checkedIcon={\r\n                <span className={clsx(classes.icon, classes.checkedIcon)} />\r\n              }\r\n              icon={<span className={classes.icon} />}\r\n              checked={allOptionsSelected ? true : false}\r\n              onChange={() => {\r\n                if (allOptionsSelected) {\r\n                  let array = val.filter(function (el) {\r\n                    return !options.includes(el);\r\n                  });\r\n                  setVal([...array]);\r\n                } else {\r\n                  setVal([...val, ...options]);\r\n                }\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        {options.map((option, index) => {\r\n          let optionIndex = val.indexOf(option);\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                paddingLeft: 20,\r\n                paddingRight: 16,\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'row',\r\n                  alignItems: 'center',\r\n                }}\r\n              >\r\n                <img\r\n                  src={option.images}\r\n                  style={{\r\n                    height: 24,\r\n                    width: 24,\r\n                    borderRadius: 50,\r\n                    marginRight: 16,\r\n                    zIndex: 1000,\r\n                  }}\r\n                />\r\n                <span style={{ fontSize: 13, color: '#DAE2EF' }}>\r\n                  {option.title}\r\n                </span>\r\n              </div>\r\n              <Checkbox\r\n                // icon={icon}\r\n                // checkedIcon={checkedIcon}\r\n                checkedIcon={\r\n                  <span className={clsx(classes.icon, classes.checkedIcon)} />\r\n                }\r\n                icon={<span className={classes.icon} />}\r\n                disableRipple\r\n                checked={optionIndex === -1 ? false : true}\r\n                onChange={(e) => {\r\n                  if (optionIndex === -1) {\r\n                    setVal([...val, option]);\r\n                  } else {\r\n                    var array = [...val]; // make a separate copy of the array\r\n                    array.splice(optionIndex, 1);\r\n                    setVal(array);\r\n                  }\r\n\r\n                  console.log(val, 'cdcnjksc');\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        style={{\r\n          width: 376,\r\n          height: 53,\r\n          backgroundColor: '#F0F5FB',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          flexDirection: 'row',\r\n          borderRadius: 16,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            flexDirection: 'row',\r\n            marginLeft: 25,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              flexDirection: 'row',\r\n              // position: 'relative',\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: 24,\r\n                width: 24,\r\n                backgroundColor: '#142A51',\r\n                borderRadius: 50,\r\n                color: 'white',\r\n                fontSize: 13,\r\n                // marginRight: -15,\r\n                zIndex: 2,\r\n              }}\r\n            >\r\n              {val.length > 0 ? val.length : optionsData.length}\r\n            </div>\r\n            {/* {_.times(3, (i) => (\r\n                <img\r\n                  key={i}\r\n                  src={images.one}\r\n                  style={{\r\n                    height: 24,\r\n                    width: 24,\r\n                    marginLeft: -15,\r\n                    borderRadius: 50,\r\n                    border: '3px solid white',\r\n                    // position: 'absolute',\r\n                  }}\r\n                />\r\n              ))} */}\r\n          </div>\r\n\r\n          <span style={{ color: '#7E98BA', marginLeft: 8, fontSize: 13 }}>\r\n            {val.length > 0\r\n              ? _.times(val.length > 2 ? 2 : val.length, (i) => {\r\n                  return i > 0 ? `, ${val[i]?.title}` : val[i]?.title;\r\n                })\r\n              : 'Select Employees'}\r\n          </span>\r\n        </div>\r\n\r\n        <img\r\n          style={{ marginRight: 25 }}\r\n          src={isOpen ? images.arrowDown : images.arrowUp}\r\n        />\r\n      </div>\r\n      {isOpen && (\r\n        <Autocomplete\r\n          multiple\r\n          classes={classes}\r\n          open={true}\r\n          //inputValue={['The Shawshank Redemption']}\r\n          onChange={(event, value) => console.log(value, 'sddjkbfs')}\r\n          popupIcon={() => <div></div>}\r\n          id='checkboxes-tags-demo'\r\n          options={optionsData}\r\n          disableCloseOnSelect\r\n          getOptionLabel={(option) => option.title}\r\n          groupBy={(option) => option.position}\r\n          renderGroup={(group) => {\r\n            return renderGroup(group);\r\n          }}\r\n          style={{ width: 376, overflow: 'none' }}\r\n          onChange={(e) => console.log(e, 'scfvfvsc')}\r\n          openOnFocus\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              variant='outlined'\r\n              // label='Checkboxes'\r\n              placeholder='Search employee...'\r\n              // style={{ backgroundColor: '#1C3663', borderRadius: 10 }}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Dropdown;\r\n","C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\dummy.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\dropdown\\styles.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\constants\\images\\index.js",[],"C:\\Personal FIles\\Work\\Akshay Gupta\\dechea\\src\\components\\View.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":25,"nodeType":"54","messageId":"55","endLine":3,"endColumn":35},{"ruleId":"52","severity":1,"message":"56","line":10,"column":7,"nodeType":"54","messageId":"55","endLine":10,"endColumn":15},{"ruleId":"52","severity":1,"message":"57","line":13,"column":7,"nodeType":"54","messageId":"55","endLine":13,"endColumn":11},{"ruleId":"52","severity":1,"message":"58","line":14,"column":7,"nodeType":"54","messageId":"55","endLine":14,"endColumn":18},{"ruleId":"52","severity":1,"message":"59","line":27,"column":9,"nodeType":"54","messageId":"55","endLine":27,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":129,"column":17,"nodeType":"62","endLine":138,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":245,"column":9,"nodeType":"62","endLine":248,"endColumn":11},{"ruleId":"63","severity":1,"message":"64","line":267,"column":11,"nodeType":"65","endLine":267,"endColumn":55},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","'lastWeek' is assigned a value but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'renderAll' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]